name: Windows

on:
  workflow_dispatch:
  push:
    paths:
      - 'src/**'
      - '.github/workflows/windows.yml'
  release:
    types: [published]

permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: write       # for actions/upload-release-asset to upload release asset
    runs-on: windows-latest

    env:
      PROJECT_NAME: ${{ github.event.repository.name }}
      PROJECT_BUILD_PATH: "${{ github.event.repository.name }}\\projects\\VS2022\\build\\${{ github.event.repository.name }}\\bin\\x64\\Release"
      PROJECT_RELEASE_PATH: ${{ github.event.repository.name }}_dev_win_x64
      PROJECT_RESOURCES_PATH: resources
      WORKSPACE: main-code.workspace  # Define the workspace directory

    steps:
    - name: Checkout this repo
      uses: actions/checkout@v3  # Use v3 or later for better performance
      with:
        path: ${{ env.WORKSPACE }}/${{ env.PROJECT_NAME }} # Checkout into workspace

    - name: Checkout raylib repo
      uses: actions/checkout@v3 # Use v3 or later
      with:
        repository: raysan5/raylib
        path: ${{ env.WORKSPACE }}/raylib  # Checkout into workspace

    - name: Setup Release Paths
      run: |
        echo "PROJECT_RELEASE_PATH=${{ env.PROJECT_NAME }}_v${{ github.event.release.tag_name }}_win_x64" >> $GITHUB_ENV
      shell: bash
      if: github.event_name == 'release' && github.event.action == 'published'

    - name: Setup Environment
      run: | 
        mkdir ${{ env.WORKSPACE }}/${{ env.PROJECT_RELEASE_PATH }} # Create in workspace
        dir ${{ env.WORKSPACE }} # List workspace directory
      shell: cmd

    - name: Setup MSBuild path
      uses: microsoft/setup-msbuild@v2

    - name: Build raylib Library + Product (VS2022 solution)
      run: |
        dir ${{ env.WORKSPACE }}
        cd ${{ env.WORKSPACE }}/${{ env.PROJECT_NAME }}/projects/VS2022
        msbuild.exe ${{ env.PROJECT_NAME }}.sln /target:${{ env.PROJECT_NAME }} /property:Configuration=Release /property:Platform=x64 /property:RaylibSrcPath="..\..\..\..\raylib\src"
        cd ../..
      shell: cmd

    - name: Generate Artifacts
      run: |
        dir ${{ env.WORKSPACE }}/${{ env.PROJECT_BUILD_PATH }}
        copy /Y ${{ env.WORKSPACE }}/${{ env.PROJECT_BUILD_PATH }}\${{ env.PROJECT_NAME }}.exe ${{ env.WORKSPACE }}/${{ env.PROJECT_RELEASE_PATH }}\${{ env.PROJECT_NAME }}.exe
        xcopy ${{ env.WORKSPACE }}/${{ env.PROJECT_NAME }}\${{ env.PROJECT_RESOURCES_PATH }} ${{ env.WORKSPACE }}/${{ env.PROJECT_RELEASE_PATH }}\${{ env.PROJECT_RESOURCES_PATH }} /s /e /i
        copy /Y ${{ env.WORKSPACE }}/${{ env.PROJECT_NAME }}\README.md ${{ env.WORKSPACE }}/${{ env.PROJECT_RELEASE_PATH }}\README.md
        copy /Y ${{ env.WORKSPACE }}/${{ env.PROJECT_NAME }}\LICENSE ${{ env.WORKSPACE }}/${{ env.PROJECT_RELEASE_PATH }}\LICENSE
        dir ${{ env.WORKSPACE }}/${{ env.PROJECT_RELEASE_PATH }}
        7z a .\${{ env.WORKSPACE }}/${{ env.PROJECT_RELEASE_PATH }}.zip .\${{ env.WORKSPACE }}/${{ env.PROJECT_RELEASE_PATH }}
      shell: cmd

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_RELEASE_PATH }}.zip
        path: ./${{ env.WORKSPACE }}/${{ env.PROJECT_RELEASE_PATH }}.zip

    - name: Upload Artifact to Release
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.WORKSPACE }}/${{ env.PROJECT_RELEASE_PATH }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: github.event_name == 'release' && github.event.action == 'published'
